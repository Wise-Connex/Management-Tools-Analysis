{
  "term": "Reengineering",
  "total_results": 9,
  "processed_count": 9,
  "discarded_count": 0,
  "items": [
    {
      "doi": "10.3127/ajis.v6i1.318",
      "title": [
        "Reengineering in Australia: factors affecting success"
      ],
      "type": "journal-article",
      "container-title": [
        "Australasian Journal of Information Systems"
      ],
      "subject": [],
      "abstract": ""
    },
    {
      "doi": "10.1145/288195.288210",
      "title": [
        "Systems reengineering patterns"
      ],
      "type": "proceedings-article",
      "container-title": [
        "Proceedings of the 6th ACM SIGSOFT international symposium on Foundations of software engineering"
      ],
      "subject": [],
      "abstract": "",
      "publication_date": "1998-11"
    },
    {
      "doi": "10.1145/291252.288210",
      "title": [
        "Systems reengineering patterns"
      ],
      "type": "journal-article",
      "container-title": [
        "ACM SIGSOFT Software Engineering Notes"
      ],
      "subject": [],
      "abstract": "<jats:p>\n            The reengineering of legacy systems --- by which we mean those that have value and yet \"significantly resist modification and evolution to meet new and constantly changing business requirements\" --- is widely recognised as one of the most significant challenges facing software engineers. The problem is widespread, affecting all kinds of organisations; serious, as failure to reengineer can hamper an organisation's attempts to remain competitive; and persistent, as there seems no reason to be confident that today's new systems are not also tomorrow's legacy systems.This paper argues1. that the main problem is not that the necessary expertise does not exist, but rather, that it is hard for software engineers to become expert;2. that the diversity of the problem domain poses problems for conventional methodological approaches;3. that an approach via\n            <jats:italic>systems reengineering patterns</jats:italic>\n            can help.We support our contention by means of some candidate patterns drawn from our own experience and published work on reengineering. We discuss the scope of the approach, how work in this area can proceed, and in particular how patterns may be identified and confirmed.\n          </jats:p>",
      "publication_date": "1998-11"
    },
    {
      "doi": "10.1145/291252.288273",
      "title": [
        "Reengineering class hierarchies using concept analysis"
      ],
      "type": "journal-article",
      "container-title": [
        "ACM SIGSOFT Software Engineering Notes"
      ],
      "subject": [],
      "abstract": "<jats:p>\n            The design of a class hierarchy may be imperfect. For example, a class\n            <jats:italic>C</jats:italic>\n            may contain a member\n            <jats:italic>m</jats:italic>\n            not accessed in any\n            <jats:italic>C</jats:italic>\n            -instance, an indication that\n            <jats:italic>m</jats:italic>\n            could be eliminated, or moved into a derived class. Furthermore, different subsets of\n            <jats:italic>C</jats:italic>\n            's members may be accessed from different\n            <jats:italic>C</jats:italic>\n            -instances, indicating that it might be appropriate to split\n            <jats:italic>C</jats:italic>\n            into multiple classes. We present a framework for detecting and remediating such design problems, which is based on\n            <jats:italic>concept analysis.</jats:italic>\n            Our method analyzes a class hierarchy along with a set of applications that use it, and constructs a\n            <jats:italic>lattice</jats:italic>\n            that provides valuable insights into the usage of the class hierarchy in a specific context. We show how a restructured class hierarchy can be generated from the lattice, and how the lattice can serve as a formal basis for interactive tools for redesigning and restructuring class hierarchies.\n          </jats:p>",
      "publication_date": "1998-11"
    },
    {
      "doi": "10.1145/288195.288273",
      "title": [
        "Reengineering class hierarchies using concept analysis"
      ],
      "type": "proceedings-article",
      "container-title": [
        "Proceedings of the 6th ACM SIGSOFT international symposium on Foundations of software engineering"
      ],
      "subject": [],
      "abstract": "",
      "publication_date": "1998-11"
    },
    {
      "doi": "10.3127/ajis.v6i1.323",
      "title": [
        "Reengineering a Software Review Process with the Functions Based Process Analysis (FPA) Method"
      ],
      "type": "journal-article",
      "container-title": [
        "Australasian Journal of Information Systems"
      ],
      "subject": [],
      "abstract": ""
    },
    {
      "doi": "10.1016/s0272-6963(98)00029-1",
      "title": [
        "Reengineering service operations: a longitudinal case study"
      ],
      "type": "journal-article",
      "container-title": [
        "Journal of Operations Management"
      ],
      "subject": [],
      "abstract": "<jats:title>Abstract</jats:title><jats:sec><jats:label /><jats:p>Examples of business process reengineering efforts have tended to emphasize manufacturing applications over service operations. This paper reports on a recently completed <jats:italic>longitudinal</jats:italic> reengineering project conducted by the authors in a <jats:italic>service</jats:italic> context. Key lessons learned from the experiences of the case study are presented in the form of propositions. Based on these propositions, a <jats:italic>process model</jats:italic> for successfully planning and implementing business process reengineering efforts is offered. In the process model, key influencing factors for each stage are identified. The process model can be helpful in overcoming risks of failure associated with business process reengineering initiatives.</jats:p></jats:sec>",
      "publication_date": "1998-12"
    },
    {
      "doi": "10.1145/301687.289565",
      "title": [
        "Reengineering a legacy system using design patterns and Ada-95 object-oriented features"
      ],
      "type": "journal-article",
      "container-title": [
        "ACM SIGAda Ada Letters"
      ],
      "subject": [],
      "abstract": "",
      "publication_date": "1998-11"
    },
    {
      "doi": "10.1145/289524.289565",
      "title": [
        "Reengineering a legacy system using design patterns and Ada-95 object-oriented features"
      ],
      "type": "proceedings-article",
      "container-title": [
        "Proceedings of the 1998 annual ACM SIGAda international conference on Ada"
      ],
      "subject": [],
      "abstract": "",
      "publication_date": "1998-11"
    }
  ]
}